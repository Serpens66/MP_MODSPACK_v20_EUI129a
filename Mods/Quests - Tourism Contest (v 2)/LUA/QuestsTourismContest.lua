print("This is the 'Quests - Tourism Contest' mod script.")

local iThisQuest = GameInfoTypes.MINOR_CIV_QUEST_TOURISM_CONTEST
local iEraMinimum = GameInfoTypes.ERA_INDUSTRIAL

--
-- House-keeping of how much tourism has been generated by each major for each quest
--

local modDB = Modding.OpenSaveData()
local cachedTourism = {}

function GetKey(iPlayer, iCS)
	return string.format("MINOR_CIV_QUEST_TOURISM_%i_%i", iPlayer, iCS)
end

function GetTotalTourism(iPlayer, iCS)
	if (cachedTourism[iPlayer] == nil) then
		cachedTourism[iPlayer] = {}
	end
	
	if (cachedTourism[iPlayer][iCS] == nil) then
		cachedTourism[iPlayer][iCS] = (modDB.GetValue(GetKey(iPlayer, iCS)) or 0)
	end
	
	return cachedTourism[iPlayer][iCS]
end

function SetTotalTourism(iPlayer, iCS, iValue)
	modDB.SetValue(GetKey(iPlayer, iCS), iValue)

	if (cachedTourism[iPlayer] == nil) then
		cachedTourism[iPlayer] = {}
	end

	cachedTourism[iPlayer][iCS] = iValue
end

function ChangeTotalTourism(iPlayer, iCS, iValue)
	SetTotalTourism(iPlayer, iCS, GetTotalTourism(iPlayer, iCS) + iValue)
end

function OnPlayerDoTurn(iPlayer)
	if (iPlayer > 0 and iPlayer <= GameDefines.MAX_MAJOR_CIVS) then
		local pPlayer = Players[iPlayer-1]
		if (pPlayer:IsAlive() and pPlayer:GetCurrentEra() >= iEraMinimum) then
			local iTourism = pPlayer:GetTourism()
			
			if (iTourism > 0) then
				for iCS = GameDefines.MAX_MAJOR_CIVS, GameDefines.MAX_CIV_PLAYERS-1, 1 do
					if (Players[iCS]:IsAlive()) then
						ChangeTotalTourism(iPlayer-1, iCS, iTourism)
					end
				end
			end
		end
	end
end
GameEvents.PlayerDoTurn.Add(OnPlayerDoTurn)


--
-- Quest event handlers (in the approximate order they will occur)
--

function OnQuestIsAvailable(iPlayer, iCS, iQuest, bNewQuest, iData1, iData2)
	if (iQuest == iThisQuest) then
		-- print(string.format("QuestIsAvailable(%i, %i, %i, %s, %i, %i)", iPlayer, iCS, iQuest, (bNewQuest and "true" or "false"), iData1, iData2))
		
		-- Only let the player join in if they are in (or past) the appropriate era
		return Players[iPlayer]:GetCurrentEra() >= iEraMinimum
	end
	
	return false
end
GameEvents.QuestIsAvailable.Add(OnQuestIsAvailable)

function OnQuestStart(iPlayer, iCS, iQuest, bNewQuest, iStartTurn, iData1, iData2)
	if (iQuest == iThisQuest) then
		-- print(string.format("QuestStart(%i, %i, %i, %s, %i, %i, %i)", iPlayer, iCS, iQuest, (bNewQuest and "true" or "false"), iStartTurn, iData1, iData2))
		SetTotalTourism(iPlayer, iCS, 0)
	end
end
GameEvents.QuestStart.Add(OnQuestStart)

function OnQuestContestValue(iPlayer, iCS, iQuest)
	if (iQuest == iThisQuest) then
		-- print(string.format("QuestContestValue(%i, %i, %i)", iPlayer, iCS, iQuest))
		return GetTotalTourism(iPlayer, iCS)
	end
	
	return 0
end
GameEvents.QuestContestValue.Add(OnQuestContestValue)

function OnQuestSendNotification(iPlayer, iCS, iQuest, iStartTurn, iEndTurn, iData1, iData2, bStart, bFinish, sNames)
	if (iQuest == iThisQuest) then
		-- print(string.format("QuestSendNotification(%i, %i, %i, %i, %i, %i, %i, %s, %s, %s)", iPlayer, iCS, iQuest, iStartTurn, iEndTurn, iData1, iData2, (bStart and "true" or "false"), (bFinish and "true" or "false"), sNames))
		if (bStart) then
			local pMinor = Players[iCS]

			local iTurnsRemaining = iEndTurn - Game.GetGameTurn()
			local iTurnsDuration = iEndTurn - iStartTurn  -- Don't be tempted to do a database lookup here, as that doesn't allow for game speed scaling
			local sMinor = pMinor:GetName()
			
			local sMessage = Locale.ConvertTextKey("TXT_KEY_MINOR_CIV_QUEST_TOURISM_CONTEST_START", iTurnsDuration, iTurnsRemaining, sMinor)
			local sSummary = Locale.ConvertTextKey("TXT_KEY_MINOR_CIV_QUEST_TOURISM_CONTEST_START_S", sMinor)

			Players[iPlayer]:AddQuestNotification(iCS, sMessage, sSummary, -1, -1, true)
		end
	end
end
GameEvents.QuestSendNotification.Add(OnQuestSendNotification)

function OnQuestIsCompleted(iPlayer, iCS, iQuest, bLastTurn)
	if (iQuest == iThisQuest) then
		-- print(string.format("QuestIsCompleted(%i, %i, %i, %s)", iPlayer, iCS, iQuest, (bLastTurn and "true" or "false")))
		
		-- Is it time to compare the scores?
		if (bLastTurn) then
			return Players[iCS]:IsMinorCivContestLeader(iPlayer, iQuest)
		end
	end
	
	return false
end
GameEvents.QuestIsCompleted.Add(OnQuestIsCompleted)
